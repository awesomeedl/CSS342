Sun Jan 24 17:43:27 PST 2021
Linux csslab8.uwb.edu 3.10.0-1160.11.1.el7.x86_64 #1 SMP Fri Dec 18 16:34:56 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=1124813(tliao512) gid=2121124813(tliao512) groups=2121124813(tliao512),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
test1 complete
test2 complete
test3 complete
test4 complete
Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
12704 warnings generated.
24932 warnings generated.
Suppressed 24932 warnings (24932 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./main.cpp
63,65c63,65
<   TimeSpan ts(1,20,30);
<   TimeSpan ts1(1,20,30);
<   TimeSpan ts2(2,41,0);
---
>   TimeSpan ts(1, 20, 30);
>   TimeSpan ts1(1, 20, 30);
>   TimeSpan ts2(2, 41, 0);
83,85c83,84
< //   cout << "hr: " << ts.getHour() << " min: " << ts.getMinute() << " sec: " << ts.getSecond() << endl;
< //   TimeSpan ts2(0,60,-1);
< //   cout << ts2 << endl;
---
> //   cout << "hr: " << ts.getHour() << " min: " << ts.getMinute() << " sec: " <<
> //   ts.getSecond() << endl; TimeSpan ts2(0,60,-1); cout << ts2 << endl;
Running clang-format on ./timespan.cpp
15c15
<   int sec = abs(ts.getSecond()); 
---
>   int sec = abs(ts.getSecond());
17c17,19
<   if (!ts.isPositive()) { out << "-"; }
---
>   if (!ts.isPositive()) {
>     out << "-";
>   }
20c22,24
<   if (min < 10) { out << "0"; }
---
>   if (min < 10) {
>     out << "0";
>   }
23c27,29
<   if (sec < 10) { out << "0"; }
---
>   if (sec < 10) {
>     out << "0";
>   }
25c31
<   return out; 
---
>   return out;
46c52,53
< // The remainder of first dividing by hour then by minute is the second component
---
> // The remainder of first dividing by hour then by minute is the second
> // component
77c84
< bool TimeSpan::operator==(const TimeSpan &ts) const { 
---
> bool TimeSpan::operator==(const TimeSpan &ts) const {
79c86
<   return (this->rawTime == ts.rawTime); 
---
>   return (this->rawTime == ts.rawTime);
83c90
< bool TimeSpan::operator!=(const TimeSpan &ts) const { 
---
> bool TimeSpan::operator!=(const TimeSpan &ts) const {
85c92
<   return !(*this == ts); 
---
>   return !(*this == ts);
90,92c97
< void TimeSpan::operator+=(const TimeSpan &ts) {
<   this->rawTime += ts.rawTime;
< }
---
> void TimeSpan::operator+=(const TimeSpan &ts) { this->rawTime += ts.rawTime; }
95,97c100
< void TimeSpan::operator-=(const TimeSpan &ts) {
<   this->rawTime -= ts.rawTime;
< }
---
> void TimeSpan::operator-=(const TimeSpan &ts) { this->rawTime -= ts.rawTime; }
100,102c103
< void TimeSpan::operator*=(unsigned int number) {
<   this->rawTime *= number;
< }
---
> void TimeSpan::operator*=(unsigned int number) { this->rawTime *= number; }
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==27648== Memcheck, a memory error detector
==27648== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==27648== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==27648== Command: ./a.out
==27648== Parent PID: 27564
==27648== 
==27648== 
==27648== HEAP SUMMARY:
==27648==     in use at exit: 0 bytes in 0 blocks
==27648==   total heap usage: 1 allocs, 1 frees, 72,704 bytes allocated
==27648== 
==27648== All heap blocks were freed -- no leaks are possible
==27648== 
==27648== For lists of detected and suppressed errors, rerun with: -s
==27648== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/tliao512/ucourses/css342/ass2/main.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------
test1()                           1       0 100.00%        22       0 100.00%
test2()                           1       0 100.00%        15       0 100.00%
test3()                           1       0 100.00%        10       0 100.00%
test4()                           1       0 100.00%        16       0 100.00%
main                              1       0 100.00%         9       0 100.00%
-----------------------------------------------------------------------------
TOTAL                             5       0 100.00%        72       0 100.00%

File '/home/NETID/tliao512/ucourses/css342/ass2/timespan.cpp':
Name                                          Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------------------------
operator<<(std::ostream&, TimeSpan const&)          7       0 100.00%        19       0 100.00%
TimeSpan::TimeSpan(double, double, double)          1       0 100.00%         6       0 100.00%
TimeSpan::getHour() const                           1       0 100.00%         1       0 100.00%
TimeSpan::getMinute() const                         1       0 100.00%         1       0 100.00%
TimeSpan::getSecond() const                         1       0 100.00%         1       0 100.00%
TimeSpan::isPositive() const                        1       0 100.00%         1       0 100.00%
TimeSpan::operator+(TimeSpan const&) const          1       0 100.00%         6       0 100.00%
TimeSpan::operator-(TimeSpan const&) const          1       0 100.00%         6       0 100.00%
TimeSpan::operator*(unsigned int) const             1       0 100.00%         6       0 100.00%
TimeSpan::operator==(TimeSpan const&) const         1       0 100.00%         4       0 100.00%
TimeSpan::operator!=(TimeSpan const&) const         1       0 100.00%         4       0 100.00%
TimeSpan::operator+=(TimeSpan const&)               1       0 100.00%         3       0 100.00%
TimeSpan::operator-=(TimeSpan const&)               1       0 100.00%         3       0 100.00%
TimeSpan::operator*=(unsigned int)                  1       0 100.00%         3       0 100.00%
TimeSpan::operator<(TimeSpan const&) const          1       0 100.00%         3       0 100.00%
TimeSpan::operator>(TimeSpan const&) const          1       0 100.00%         3       0 100.00%
TimeSpan::operator<=(TimeSpan const&) const         1       0 100.00%         3       0 100.00%
TimeSpan::operator>=(TimeSpan const&) const         1       0 100.00%         3       0 100.00%
-----------------------------------------------------------------------------------------------
TOTAL                                              24       0 100.00%        76       0 100.00%
/home/NETID/tliao512/ucourses/css342/ass2/main.cpp:
    1|       |#include <cassert>
    2|       |#include <iostream>
    3|       |#include <sstream>
    4|       |
    5|       |#include "timespan.h"
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// testing constructor
   10|      1|void test1() {
   11|      1|  TimeSpan ts(1, 20, 30);
   12|      1|  stringstream ss;
   13|      1|  ss << ts;
   14|      1|  assert(ss.str() == "1:20:30");
   15|      1|
   16|      1|  TimeSpan ts2(4, -20, -90);
   17|      1|  ss.str("");
   18|      1|  ss << ts2;
   19|      1|  assert(ss.str() == "3:38:30");
   20|      1|
   21|      1|  TimeSpan ts3(1.5, 30.5, -90);
   22|      1|  ss.str("");
   23|      1|  ss << ts3;
   24|      1|  assert(ss.str() == "1:59:00");
   25|      1|
   26|      1|  TimeSpan ts4(0, 0.07, 0);
   27|      1|  ss.str("");
   28|      1|  ss << ts4;
   29|      1|  assert(ss.str() == "0:00:04");
   30|      1|  cout << "test1 complete" << endl;
   31|      1|}
   32|       |
   33|       |// testing equality, addition, subtraction, multiplication
   34|      1|void test2() {
   35|      1|  TimeSpan ts(1, 20, 30);
   36|      1|  TimeSpan ts2(1, 20, 30);
   37|      1|  TimeSpan ts3(0, 0, 0);
   38|      1|  assert(ts == ts2);
   39|      1|  assert(!(ts != ts2));
   40|      1|  assert(ts != ts3);
   41|      1|  assert((ts + ts + ts) == (ts2 * 3));
   42|      1|  assert((ts * 5) == (ts2 * 4) + ts2);
   43|      1|  assert((ts * 5) == (ts2 * 6) - ts2);
   44|      1|  assert((ts + ts - ts) == ((ts2 * 2) - ts));
   45|      1|  assert((ts - ts2) == ts3);
   46|      1|  assert((ts3 * 5) == ts3);
   47|      1|  cout << "test2 complete" << endl;
   48|      1|}
   49|       |
   50|      1|void test3() {
   51|      1|  TimeSpan ts0(0, 0, 0);
   52|      1|  TimeSpan ts1(0, 0, 10);
   53|      1|  TimeSpan ts2 = ts0 - ts1;
   54|      1|  assert(ts1.isPositive() && !ts2.isPositive());
   55|      1|  stringstream ss;
   56|      1|  ss << ts2;
   57|      1|  assert(ss.str() == "-0:00:10");
   58|      1|  cout << "test3 complete" << endl;
   59|      1|}
   60|       |
   61|       |// Testing additional operators
   62|      1|void test4() {
   63|      1|  TimeSpan ts(1,20,30);
   64|      1|  TimeSpan ts1(1,20,30);
   65|      1|  TimeSpan ts2(2,41,0);
   66|      1|  ts += ts1;
   67|      1|  assert(ts == ts2);
   68|      1|  ts -= ts1;
   69|      1|  assert(ts == ts1);
   70|      1|  assert(ts < ts2);
   71|      1|  assert(ts <= ts2);
   72|      1|  assert(ts2 > ts);
   73|      1|  assert(ts2 >= ts);
   74|      1|  ts *= 2;
   75|      1|  assert(ts == ts2);
   76|      1|  cout << "test4 complete" << endl;
   77|      1|}
   78|       |
   79|       |// // Testing some edge cases
   80|       |// void test5() {
   81|       |//   TimeSpan ts(-1,-1,-1);
   82|       |//   cout << ts << endl;
   83|       |//   cout << "hr: " << ts.getHour() << " min: " << ts.getMinute() << " sec: " << ts.getSecond() << endl;
   84|       |//   TimeSpan ts2(0,60,-1);
   85|       |//   cout << ts2 << endl;
   86|       |//   TimeSpan ts3;
   87|       |//   cout << ts3 << endl;
   88|       |
   89|       |// }
   90|       |
   91|      1|int main() {
   92|      1|  test1();
   93|      1|  test2();
   94|      1|  test3();
   95|      1|  test4();
   96|      1|  // test5();
   97|      1|  cout << "Done." << std::endl;
   98|      1|  return 0;
   99|      1|}

/home/NETID/tliao512/ucourses/css342/ass2/timespan.cpp:
    1|       |//
    2|       |// Created by Yusuf Pisan on 4/2/18.
    3|       |//
    4|       |
    5|       |#include "timespan.h"
    6|       |
    7|       |// Feeding a TimeSpan object to ostream, format should be H:MM:SS (0:00:00)
    8|      5|ostream &operator<<(ostream &out, const TimeSpan &ts) {
    9|      5|  // Temporary storing the components
   10|      5|  // Since we will check for a negative duration and add negative sign
   11|      5|  // before the hour component, all the components will be translated
   12|      5|  // to their absolute values to fit the formatting
   13|      5|  int hr = abs(ts.getHour());
   14|      5|  int min = abs(ts.getMinute());
   15|      5|  int sec = abs(ts.getSecond()); 
   16|      5|  // If the timeSpan is negative, append a negative sign before it
   17|      5|  if (!ts.isPositive()) { out << "-"; }
   18|      5|  out << hr << ":";
   19|      5|  // For formatting: If the minute is single digit, append "0" before it
   20|      5|  if (min < 10) { out << "0"; }
   21|      5|  out << min << ":";
   22|      5|  // For formatting: If the second is single digit, append "0" before it
   23|      5|  if (sec < 10) { out << "0"; }
   24|      5|  out << sec;
   25|      5|  return out; 
   26|      5|}
   27|       |
   28|       |// constructor
   29|     28|TimeSpan::TimeSpan(double hour, double minute, double second) {
   30|     28|  // Instead of storing them separately, translate hour and minute into
   31|     28|  // seconds and store them into a single variable
   32|     28|  // decimals are rounded using cmath round to the nearest integer
   33|     28|  rawTime = static_cast<int>(round(hour * 3600 + minute * 60 + second));
   34|     28|}
   35|       |
   36|       |// hour component
   37|       |// since there is 3600 seconds in an hour, rawTime/3600 gives the hour component
   38|      5|int TimeSpan::getHour() const { return rawTime / 3600; }
   39|       |
   40|       |// minute component
   41|       |// (rawTime % 3600) gets the remainder after dividing out the hour component,
   42|       |// further dividing it by 60 gives the minute component
   43|      5|int TimeSpan::getMinute() const { return (rawTime % 3600) / 60; }
   44|       |
   45|       |// second component
   46|       |// The remainder of first dividing by hour then by minute is the second component
   47|      5|int TimeSpan::getSecond() const { return (rawTime % 3600) % 60; }
   48|       |
   49|       |// true if timespan is 0 or larger
   50|      7|bool TimeSpan::isPositive() const { return rawTime >= 0; }
   51|       |
   52|       |// add
   53|      4|TimeSpan TimeSpan::operator+(const TimeSpan &ts) const {
   54|      4|  TimeSpan tsSum;
   55|      4|  // simply adds up the rawTime in both of the TimeSpan
   56|      4|  tsSum.rawTime = this->rawTime + ts.rawTime;
   57|      4|  return tsSum;
   58|      4|}
   59|       |
   60|       |// subtract
   61|      5|TimeSpan TimeSpan::operator-(const TimeSpan &ts) const {
   62|      5|  TimeSpan tsSub;
   63|      5|  // similar to add, simply subtract the rawTime
   64|      5|  tsSub.rawTime = this->rawTime - ts.rawTime;
   65|      5|  return tsSub;
   66|      5|}
   67|       |
   68|       |// multiply with an integer
   69|      7|TimeSpan TimeSpan::operator*(unsigned int number) const {
   70|      7|  TimeSpan tsLarge;
   71|      7|  // since rawTime is integer, we can just multiply it by number
   72|      7|  tsLarge.rawTime = this->rawTime * number;
   73|      7|  return tsLarge;
   74|      7|}
   75|       |
   76|       |// equality ==
   77|     12|bool TimeSpan::operator==(const TimeSpan &ts) const { 
   78|     12|  // Two TimeSpan are equal same if the values of rawTime are equal
   79|     12|  return (this->rawTime == ts.rawTime); 
   80|     12|}
   81|       |
   82|       |// inequality !=
   83|      2|bool TimeSpan::operator!=(const TimeSpan &ts) const { 
   84|      2|  // Reverse of equality
   85|      2|  return !(*this == ts); 
   86|      2|}
   87|       |
   88|       |// The following overloads are added by the student
   89|       |// shorthand add
   90|      1|void TimeSpan::operator+=(const TimeSpan &ts) {
   91|      1|  this->rawTime += ts.rawTime;
   92|      1|}
   93|       |
   94|       |// shorthand subtract
   95|      1|void TimeSpan::operator-=(const TimeSpan &ts) {
   96|      1|  this->rawTime -= ts.rawTime;
   97|      1|}
   98|       |
   99|       |// shorthand multiply
  100|      1|void TimeSpan::operator*=(unsigned int number) {
  101|      1|  this->rawTime *= number;
  102|      1|}
  103|       |
  104|       |// check smaller than
  105|      1|bool TimeSpan::operator<(const TimeSpan &ts) const {
  106|      1|  return this->rawTime < ts.rawTime;
  107|      1|}
  108|       |
  109|       |// check larger than
  110|      1|bool TimeSpan::operator>(const TimeSpan &ts) const {
  111|      1|  return this->rawTime > ts.rawTime;
  112|      1|}
  113|       |
  114|       |// check smaller than and equal to
  115|      1|bool TimeSpan::operator<=(const TimeSpan &ts) const {
  116|      1|  return this->rawTime <= ts.rawTime;
  117|      1|}
  118|       |
  119|       |// check larger than and equal to
  120|      1|bool TimeSpan::operator>=(const TimeSpan &ts) const {
  121|      1|  return this->rawTime >= ts.rawTime;
  122|      1|}

Sun Jan 24 17:43:41 PST 2021
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
